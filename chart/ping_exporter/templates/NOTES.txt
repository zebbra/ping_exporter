1. Get the Ping Exporter URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "ping_exporter.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch its status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "ping_exporter.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "ping_exporter.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "ping_exporter.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:9115 to access the Ping Exporter"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 9115:$CONTAINER_PORT
{{- end }}

2. Ping Exporter Usage:

   - Check exporter metrics:
     GET /metrics

   - Probe a target with default settings:
     GET /probe?target=google.com

   - Probe with custom parameters:
     GET /probe?target=8.8.8.8&count=5&interval=1s&packet_size=64&timeout=10s

   - Enable debug mode:
     GET /probe?target=example.com&debug=true

   - IPv6 ping:
     GET /probe?target=2001:4860:4860::8888&ip_protocol=ip6

3. Prometheus Configuration:

   Add the following job to your Prometheus configuration to scrape ping metrics:

   scrape_configs:
   - job_name: 'ping-exporter'
     static_configs:
     - targets: ['{{ include "ping_exporter.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}']

   - job_name: 'ping-probes'
     metrics_path: /probe
     params:
       count: ['5']
       interval: ['1s']
     static_configs:
     - targets:
       - google.com
       - 8.8.8.8
     relabel_configs:
     - source_labels: [__address__]
       target_label: __param_target
     - source_labels: [__param_target]
       target_label: instance
     - target_label: __address__
       replacement: {{ include "ping_exporter.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}

{{- if .Values.serviceMonitor.enabled }}
4. ServiceMonitor has been created for Prometheus Operator integration.
{{- end }}

{{- if .Values.prometheusRule.enabled }}
5. PrometheusRule has been created with alerting rules.
{{- end }}

For more information, visit: https://github.com/zebbra/ping_exporter